расскажи про последний проект

[transaction] транзакционность в микросервисах
Options:
1. Distributed transaction
A distributed transaction is a very complex process with a lot of moving parts that can fail. Also, if these parts run on different machines or even in different data centers, the process of committing a transaction could become very long and unreliable.
2. Two-Phase Commit Protocol
The problem with 2PC is that it is quite slow compared to the time for operation of a single microservice.
Coordinating the transaction between microservices, even if they are on the same network, can really slow the system down.
3. Eventual Consistency and Compensation
By far, one of the most feasible models of handling consistency across microservices is eventual consistency.
One way to solve it would be with a message-driven approach including compensation.
The messaging platform could ensure that the messages sent by the microservices are persisted. Then they would be delivered at a later time if the receiver weren’t currently available
https://www.baeldung.com/transactions-across-microservices
https://habr.com/ru/company/nixsolutions/blog/321686/
https://habr.com/ru/company/nixsolutions/blog/322214/

[microservices] кроме транзакций, в микросервисах какие еще могут быть проблемы?
1. As if monitoring a monolith wasn’t hard enough
2. Logging is distributed between services
3. An issue that’s caused by one service, can cause trouble elsewhere
4. Finding the root cause of problems
5. Version management and cyclic dependencies between services
https://blog.overops.com/5-ways-to-not-f-up-your-microservices-in-production/

[microservices] как решается проблема с коммуникацией, когда какой-либо сервис не доступен?
1. The circuit breaker pattern is the solution to this problem. The basic idea behind the circuit breaker is very simple. You wrap a protected function call in a circuit breaker object, which monitors for failures. Once the failures reach a certain threshold, the circuit breaker trips, and all further calls to the circuit breaker return with an error or with some alternative service or default message, without the protected call being made at all. This will make sure system is responsive and threads are not waiting for an unresponsive call.
2. Retry Logic
https://blog.risingstack.com/designing-microservices-architecture-for-failure/
https://dzone.com/articles/circuit-breaker-pattern

[rabbitMQ] что такое rabbitMQ?
RabbitMQ, also known as Open-Source Message Broker, supports multiple message protocols and can be deployed on distributed systems. It is lightweight and makes it easy to deploy applications. It mainly acts as a queue where a message which is entered can first be operated on. RabbitMQ runs on many operating systems and cloud environments and provides a wide range of developer tools for most popular languages. It is a Producer-Consumer style pattern where the producer sends a message and the consumer consumes it. The main features of RabbitMQ are mentioned below:
Asynchronous Messaging
Distributed Deployment
Management & Monitoring
Enterprise- and Cloud-Ready
https://dzone.com/articles/rabbitmq-in-microservices

[rabbitMQ] а если rabbitMQ отвалится?

[rest] в качестве rest-клиента что используется?
1. Netflix provides Feign as an abstraction over REST-based calls, by which microservices can communicate with each other, but developers don't have to bother about REST internal details.
2. Jersey
3. Spring RestTemplate
https://dzone.com/articles/microservices-communication-feign-as-rest-client
https://stackoverflow.com/questions/221442/rest-clients-for-java

[java] какие нововведения в java 8, 9, 10, 11?
https://codete.com/blog/java-8-java-11-quick-guide/
https://www.quora.com/What-are-the-differences-between-Java-8-9-10-and-11

[java] в чем концептуальное отличие stream api от collection?
Streams differ from collections in several ways:
No storage. A stream is not a data structure that stores elements; instead, it conveys elements from a source such as a data structure, an array, a generator function, or an I/O channel, through a pipeline of computational operations.
Functional in nature. An operation on a stream produces a result, but does not modify its source. For example, filtering a Stream obtained from a collection produces a new Stream without the filtered elements, rather than removing elements from the source collection.
Laziness-seeking. Many stream operations, such as filtering, mapping, or duplicate removal, can be implemented lazily, exposing opportunities for optimization. For example, "find the first  String with three consecutive vowels" need not examine all the input strings. Stream operations are divided into intermediate (Stream-producing) operations and terminal (value- or side-effect-producing) operations. Intermediate operations are always lazy.
Possibly unbounded. While collections have a finite size, streams need not. Short-circuiting operations such as limit(n) or findFirst() can allow computations on infinite streams to complete in finite time.
Consumable. The elements of a stream are only visited once during the life of a stream. Like an Iterator, a new stream must be generated to revisit the same elements of the source.
https://stackoverflow.com/questions/39432699/what-is-the-difference-between-streams-and-collections-in-java-8

[java] реализовать stream api (с функциями filter, map), lambda можно использовать

[java] [concurrency] что такое volatile?
In Java, each thread has a separate memory space known as working memory; this holds the values of different variables used for performing operations. After performing an operation, thread copies the updated value of the variable to the main memory, and from there other threads can read the latest value.
Simply put, the volatile keyword marks a variable to always go to main memory, for both reads and writes, in the case of multiple threads accessing it.
https://www.baeldung.com/java-volatile

[java] как мы создаем копии объектов вне volatile?
stack

[java] где хранится ссылка на объект?
stack
https://stackoverflow.com/questions/13624462/where-does-class-object-reference-variable-get-stored-in-java-in-heap-or-stac

[java] типы памяти в Java?
Cтек – участок памяти, тесно связанный с потоками. У каждого потока есть свой стек, которые хранит локальные переменные, параметры методов и стек вызовов. Переменная, хранящаяся в стеке одного потока, не видна для другого.
Куча – общий участок памяти, который делится между всеми потоками. Объекты, неважно локальные или любого другого уровня, создаются в куче. Для улучшения производительности, поток обычно кэширует значения из кучи в свой стек, в этом случае для того, чтобы указать потоку, что переменную следует читать из кучи используется ключевое слово volatile.
https://github.com/enhorse/java-interview/blob/master/concurrency.md#%D0%A0%D0%B0%D1%81%D1%81%D0%BA%D0%B0%D0%B6%D0%B8%D1%82%D0%B5-%D0%BE-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D0%B8-%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D0%B8-java

[java] что такое java agent?
Сам агент это отдельное приложение которое предоставляет доступ к механизму манипуляции байт-кодом (java.lang.instrument) в runtime.
https://habr.com/ru/post/230239/
https://www.javacodegeeks.com/2015/09/java-agents.html

[java] был опыт troubleshooting?
logs, new relic


[java] пользовались profiler?
A Java Profiler is a tool that monitors Java bytecode constructs and operations at the JVM level. These code constructs and operations include object creation, iterative executions (including recursive calls), method executions, thread executions, and garbage collections.
https://www.baeldung.com/java-profilers

что такое stop the world?
garbage collector

[java] чем отличается int, Integer, AtomicInteger?
int is a primitive type. Variables of type int store the actual binary value for the integer you want to represent. int.parseInt("1") doesn't make sense because int is not a class and therefore doesn't have any methods.
Integer is a class, no different from any other in the Java language. Variables of type Integer store references to Integer objects, just as with any other reference (object) type. Integer.parseInt("1") is a call to the static method parseInt from class Integer (note that this method actually returns an int and not an Integer).
To be more specific, Integer is a class with a single field of type int. This class is used where you need an int to be treated like any other object, such as in generic types or situations where you need nullability.
AtomicInteger is used in multithreaded environments when you need to make sure that only one thread can update an int variable. The advantage is that no external synchronization is requried since the operations which modify it's value are executed in a thread-safe way.
https://stackoverflow.com/questions/8660691/what-is-the-difference-between-integer-and-int-in-java
https://stackoverflow.com/questions/38846976/what-is-the-difference-between-atomic-integer-and-normal-immutable-integer-class

[java] i++ для Integer, что будет с памятью?
variable will be changed
https://stackoverflow.com/questions/13280134/why-does-post-increment-work-on-wrapper-classes

[servlet] что такое servlet api?

[servlet] в чем разница между параметрами и аттрибутами?
getParameter() returns http request parameters. Those passed from the client to the server. For example http://example.com/servlet?parameter=1. Can only return String
getAttribute() is for server-side usage only - you fill the request with attributes that you can use within the same request. For example - you set an attribute in a servlet, and read it from a JSP. Can be used for any object, not just string.
https://stackoverflow.com/questions/5243754/difference-between-getattribute-and-getparameter

[servlet] жизненный цикл сервлета?
There are three life cycle methods of a Servlet:
init()
service()
destroy()
https://www.geeksforgeeks.org/life-cycle-of-a-servlet/

а можно ли какой-то сервлет быстрее создать, чем другие?

[servlet] что такое servlet mapping?
Servlet mapping specifies the web container of which java servlet should be invoked for a url given by client. It maps url patterns to servlets. When there is a request from a client, servlet container decides to which application it should forward to. Then context path of url is matched for mapping servlets.
https://javapapers.com/servlet/what-is-servlet-mapping/

[sql] что такое having в sql?
HAVING filters records that work on summarized GROUP BY results.
HAVING applies to summarized group records, whereas WHERE applies to individual records.
Only the groups that meet the HAVING criteria will be returned.
HAVING requires that a GROUP BY clause is present.
WHERE and HAVING can be in the same query.
https://www.dofactory.com/sql/having

[transaction] что такое транзакция?
Транзакция - это воздействие на базу данных, переводящее её из одного целостного состояния в другое и выражаемое в изменении данных, хранящихся в базе данных.
https://github.com/enhorse/java-interview/blob/master/db.md#%D0%A7%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-%D1%82%D1%80%D0%B0%D0%BD%D0%B7%D0%B0%D0%BA%D1%86%D0%B8%D1%8F
https://proselyte.net/tutorials/sql/sql-transactions/

[transaction] что должно выполняться? для чего нужны?
Атомарность (atomicity) гарантирует, что никакая транзакция не будет зафиксирована в системе частично. Будут либо выполнены все её подоперации, либо не выполнено ни одной.
Согласованность. При завершении транзакции не должны быть нарушены ограничения накладываемые на данные (например constraints в БД). Согласованность подразумевает, что система будет переведена из одного корректного состояния в другое корректное.
Изолированность (isolation). Во время выполнения транзакции параллельные транзакции не должны оказывать влияние на её результат.
Долговечность (durability). Независимо от проблем на нижних уровнях (к примеру, обесточивание системы или сбои в оборудовании) изменения, сделанные успешно завершённой транзакцией, должны остаться сохранёнными после возвращения системы в работу.
https://github.com/enhorse/java-interview/blob/master/db.md#%D0%BD%D0%B0%D0%B7%D0%BE%D0%B2%D0%B8%D1%82%D0%B5-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D1%8B%D0%B5-%D1%81%D0%B2%D0%BE%D0%B9%D1%81%D1%82%D0%B2%D0%B0-%D1%82%D1%80%D0%B0%D0%BD%D0%B7%D0%B0%D0%BA%D1%86%D0%B8%D0%B8
https://habr.com/ru/post/446662/

[transaction] как бд обеспечивает согласованность данных?

[transaction] optimistic/pessimistic locking в чем разница?
Optimistic Locking is a strategy where you read a record, take note of a version number (other methods to do this involve dates, timestamps or checksums/hashes) and check that the version hasn't changed before you write the record back. When you write the record back you filter the update on the version to make sure it's atomic. (i.e. hasn't been updated between when you check the version and write the record to the disk) and update the version in one hit.
Pessimistic Locking is when you lock the record for your exclusive use until you have finished with it. It has much better integrity than optimistic locking but requires you to be careful with your application design to avoid Deadlocks. To use pessimistic locking you need either a direct connection to the database (as would typically be the case in a two tier client server application) or an externally available transaction ID that can be used independently of the connection.
https://stackoverflow.com/questions/129329/optimistic-vs-pessimistic-locking

[transaction] Eventual consistency что такое?
Согласованность в конечном счете (eventual consistency) означает, что если в течение достаточно долгого периода времени в систему не поступают новые операции обновления данных, то можно ожидать, что результаты всех предыдущих операций обновления данных в конце концов распространятся по всем узлам системы, и все реплики данных согласуются
http://citforum.ru/database/articles/kuz_oltp_2010/2.shtml

[nosql] c nosql был опыт?

[spring] как конфигурили спринг?
xml-based configuration, when you describe configuration in xml file;
java-based configuration, when configuration is Java class, marked with specific annotations;
groovy-based configuration, when configuration is file with Groovy code;
https://stackoverflow.com/questions/35807056/how-many-ways-are-there-to-configure-the-spring-framework-what-are-the-differen

что такое lookup method?
The getter method will return us the reference that is been set but suppose you want a new instance of the dependent bean each time you invoke the getter method
https://www.javacodegeeks.com/2015/05/spring-lookup-method-example.html

[transaction] [spring] использовали declarative transaction в спринге?
https://stackoverflow.com/questions/11222103/declarative-or-programmatic-transaction-in-spring

[spring] в спринге что создает прокси?
After the bean instances are created they are run through a series of BeanPostProcessors - Based on the AOP advice, the proxies are created by a BeanPostProcessor called AnnotationAwareAspectJAutoProxyCreator (or possibly its subclasses)
https://stackoverflow.com/questions/12648394/when-does-spring-creates-proxies-in-the-beans-lifecycle

в чем разница beanFactory/factoryBean?
@LoggableAutowired - своя аннотация, как это сделать?
spring boot использовали?
в чем отличие от спринга?
как добавить свои конфигурации?

где описание конфигураций в meta-inf?
https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-auto-configuration.html

есть опыт в spring cloud?

attached/detached entity что это значит?
https://stackoverflow.com/questions/2573739/what-are-detached-persistent-and-transient-objects-in-hibernate

а зачем нужен flush?
https://stackoverflow.com/questions/3220336/whats-the-use-of-session-flush-in-hibernate

в spring attached/dettached как называются?

уровни кэша в hibernate?
https://habr.com/ru/post/135176/

где находится кэш первого уровня?
как конкретно использовали solr?
как http протокол работает?
а body в http?

области видимости в js есть?
https://getinstance.info/articles/javascript/variables-scope-in-javascript/

зачем нужен bind? а есть call & apply?
https://medium.com/@jhawleypeters/javascript-call-vs-apply-vs-bind-61447bc5e989

потеря контекста в js?
с docker работали?
по tcp/ip знаете что-нибудь?
есть большущий список, нужно сделать поиск по какому-то полю
бд выполняют эту задачу
что больше понравился react или angular?
какие life-cycle методы есть у компонента?
чем отличается state от props?
как меняется state в компоненте?
pipelines / kubernetes?